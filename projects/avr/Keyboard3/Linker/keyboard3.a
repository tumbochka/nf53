;/*****************************************************
;This program was produced by the
;CodeWizardAVR V2.05.0 Professional
;Automatic Program Generator
;© Copyright 1998-2010 Pavel Haiduc, HP InfoTech s.r.l.
;http://www.hpinfotech.com
;
;Project :
;Version :
;Date    : 29.09.2023
;Author  :
;Company :
;Comments:
;
;
;Chip type               : ATmega8535
;Program type            : Application
;AVR Core Clock frequency: 16,000000 MHz
;Memory model            : Small
;External RAM size       : 0
;Data Stack size         : 128
;*****************************************************/
;
;#include <mega8535.h>
;PCODE: $00000000 VOL: 0
	#ifndef __SLEEP_DEFINED__
;PCODE: $00000001 VOL: 0
	#define __SLEEP_DEFINED__
;PCODE: $00000002 VOL: 0
	.EQU __se_bit=0x40
;PCODE: $00000003 VOL: 0
	.EQU __sm_mask=0xB0
;PCODE: $00000004 VOL: 0
	.EQU __sm_powerdown=0x20
;PCODE: $00000005 VOL: 0
	.EQU __sm_powersave=0x30
;PCODE: $00000006 VOL: 0
	.EQU __sm_standby=0xA0
;PCODE: $00000007 VOL: 0
	.EQU __sm_ext_standby=0xB0
;PCODE: $00000008 VOL: 0
	.EQU __sm_adc_noise_red=0x10
;PCODE: $00000009 VOL: 0
	.SET power_ctrl_reg=mcucr
;PCODE: $0000000A VOL: 0
	#endif
;PCODE: $0000000B VOL: 0
;PCODE: $0000000C VOL: 0
;
;#ifndef RXB8
;#define RXB8 1
;#endif
;
;#ifndef TXB8
;#define TXB8 0
;#endif
;
;#ifndef UPE
;#define UPE 2
;#endif
;
;#ifndef DOR
;#define DOR 3
;#endif
;
;#ifndef FE
;#define FE 4
;#endif
;
;#ifndef UDRE
;#define UDRE 5
;#endif
;
;#ifndef RXC
;#define RXC 7
;#endif
;
;#define FRAMING_ERROR (1<<FE)
;#define PARITY_ERROR (1<<UPE)
;#define DATA_OVERRUN (1<<DOR)
;#define DATA_REGISTER_EMPTY (1<<UDRE)
;#define RX_COMPLETE (1<<RXC)
;
;// USART Receiver buffer
;#define RX_BUFFER_SIZE 64
;char rx_buffer[RX_BUFFER_SIZE];
;
;#if RX_BUFFER_SIZE <= 256
;unsigned char rx_wr_index,rx_rd_index,rx_counter;
;#else
;unsigned int rx_wr_index,rx_rd_index,rx_counter;
;#endif
;
;// This flag is set on USART Receiver buffer overflow
;bit rx_buffer_overflow;
;
;// USART Receiver interrupt service routine
;interrupt [USART_RXC] void usart_rx_isr(void)
; 0000 004B {

	.CSEG
;PCODE: $0000000D VOL: 0
;PCODE: $0000000E VOL: 0
; 0000 004C char status,data;
; 0000 004D status=UCSRA;
;PCODE: $0000000F VOL: 0
;	status -> R17
;	data -> R16
;PCODE: $00000010 VOL: 0
;PCODE: $00000011 VOL: 0
; 0000 004E data=UDR;
;PCODE: $00000012 VOL: 0
;PCODE: $00000013 VOL: 0
; 0000 004F if ((status & (FRAMING_ERROR | PARITY_ERROR | DATA_OVERRUN))==0)
;PCODE: $00000014 VOL: 0
;PCODE: $00000015 VOL: 0
;PCODE: $00000016 VOL: 0
; 0000 0050    {
; 0000 0051    rx_buffer[rx_wr_index++]=data;
;PCODE: $00000017 VOL: 0
;PCODE: $00000018 VOL: 0
;PCODE: $00000019 VOL: 0
;PCODE: $0000001A VOL: 0
;PCODE: $0000001B VOL: 0
; 0000 0052 #if RX_BUFFER_SIZE == 256
; 0000 0053    // special case for receiver buffer size=256
; 0000 0054    if (++rx_counter == 0)
; 0000 0055       {
; 0000 0056 #else
; 0000 0057    if (rx_wr_index == RX_BUFFER_SIZE) rx_wr_index=0;
;PCODE: $0000001C VOL: 0
;PCODE: $0000001D VOL: 0
;PCODE: $0000001E VOL: 0
;PCODE: $0000001F VOL: 0
; 0000 0058    if (++rx_counter == RX_BUFFER_SIZE)
;PCODE: $00000020 VOL: 0
;PCODE: $00000021 VOL: 0
;PCODE: $00000022 VOL: 0
;PCODE: $00000023 VOL: 0
;PCODE: $00000024 VOL: 0
; 0000 0059       {
; 0000 005A       rx_counter=0;
;PCODE: $00000025 VOL: 0
; 0000 005B #endif
; 0000 005C       rx_buffer_overflow=1;
;PCODE: $00000026 VOL: 0
;PCODE: $00000027 VOL: 0
;PCODE: $00000028 VOL: 0
; 0000 005D       }
; 0000 005E    }
;PCODE: $00000029 VOL: 0
; 0000 005F }
;PCODE: $0000002A VOL: 0
;PCODE: $0000002B VOL: 0
;PCODE: $0000002C VOL: 0
;PCODE: $0000002D VOL: 0
;PCODE: $0000002E VOL: 0
;
;#ifndef _DEBUG_TERMINAL_IO_
;// Get a character from the USART Receiver buffer
;#define _ALTERNATE_GETCHAR_
;#pragma used+
;char getchar(void)
; 0000 0066 {
;PCODE: $0000002F VOL: 0
;PCODE: $00000030 VOL: 0
; 0000 0067 char data;
; 0000 0068 while (rx_counter==0);
;PCODE: $00000031 VOL: 0
;	data -> R17
;PCODE: $00000032 VOL: 0
;PCODE: $00000033 VOL: 0
;PCODE: $00000034 VOL: 0
;PCODE: $00000035 VOL: 0
;PCODE: $00000036 VOL: 0
; 0000 0069 data=rx_buffer[rx_rd_index++];
;PCODE: $00000037 VOL: 0
;PCODE: $00000038 VOL: 0
;PCODE: $00000039 VOL: 0
;PCODE: $0000003A VOL: 0
;PCODE: $0000003B VOL: 0
; 0000 006A #if RX_BUFFER_SIZE != 256
; 0000 006B if (rx_rd_index == RX_BUFFER_SIZE) rx_rd_index=0;
;PCODE: $0000003C VOL: 0
;PCODE: $0000003D VOL: 0
;PCODE: $0000003E VOL: 0
;PCODE: $0000003F VOL: 0
; 0000 006C #endif
; 0000 006D #asm("cli")
;PCODE: $00000040 VOL: 0
;PCODE: $00000041 VOL: 0
	cli
;PCODE: $00000042 VOL: 0
; 0000 006E --rx_counter;
;PCODE: $00000043 VOL: 0
; 0000 006F #asm("sei")
;PCODE: $00000044 VOL: 0
	sei
;PCODE: $00000045 VOL: 0
; 0000 0070 return data;
;PCODE: $00000046 VOL: 0
;PCODE: $00000047 VOL: 0
;PCODE: $00000048 VOL: 0
; 0000 0071 }
;PCODE: $00000049 VOL: 0
;#pragma used-
;#endif
;
;// USART Transmitter buffer
;#define TX_BUFFER_SIZE 64
;char tx_buffer[TX_BUFFER_SIZE];
;
;#if TX_BUFFER_SIZE <= 256
;unsigned char tx_wr_index,tx_rd_index,tx_counter;
;#else
;unsigned int tx_wr_index,tx_rd_index,tx_counter;
;#endif
;
;// USART Transmitter interrupt service routine
;interrupt [USART_TXC] void usart_tx_isr(void)
; 0000 0081 {
;PCODE: $0000004A VOL: 0
;PCODE: $0000004B VOL: 0
; 0000 0082 if (tx_counter)
;PCODE: $0000004C VOL: 0
;PCODE: $0000004D VOL: 0
; 0000 0083    {
; 0000 0084    --tx_counter;
;PCODE: $0000004E VOL: 0
; 0000 0085    UDR=tx_buffer[tx_rd_index++];
;PCODE: $0000004F VOL: 0
;PCODE: $00000050 VOL: 0
;PCODE: $00000051 VOL: 0
;PCODE: $00000052 VOL: 0
;PCODE: $00000053 VOL: 0
;PCODE: $00000054 VOL: 0
; 0000 0086 #if TX_BUFFER_SIZE != 256
; 0000 0087    if (tx_rd_index == TX_BUFFER_SIZE) tx_rd_index=0;
;PCODE: $00000055 VOL: 0
;PCODE: $00000056 VOL: 0
;PCODE: $00000057 VOL: 0
;PCODE: $00000058 VOL: 0
; 0000 0088 #endif
; 0000 0089    }
;PCODE: $00000059 VOL: 0
; 0000 008A }
;PCODE: $0000005A VOL: 0
;PCODE: $0000005B VOL: 0
;PCODE: $0000005C VOL: 0
;PCODE: $0000005D VOL: 0
;
;#ifndef _DEBUG_TERMINAL_IO_
;// Write a character to the USART Transmitter buffer
;#define _ALTERNATE_PUTCHAR_
;#pragma used+
;void putchar(char c)
; 0000 0091 {
;PCODE: $0000005E VOL: 0
;PCODE: $0000005F VOL: 0
; 0000 0092 while (tx_counter == TX_BUFFER_SIZE);
;	c -> Y+0
;PCODE: $00000060 VOL: 0
;PCODE: $00000061 VOL: 0
;PCODE: $00000062 VOL: 0
;PCODE: $00000063 VOL: 0
;PCODE: $00000064 VOL: 0
;PCODE: $00000065 VOL: 0
; 0000 0093 #asm("cli")
;PCODE: $00000066 VOL: 0
	cli
;PCODE: $00000067 VOL: 0
; 0000 0094 if (tx_counter || ((UCSRA & DATA_REGISTER_EMPTY)==0))
;PCODE: $00000068 VOL: 0
;PCODE: $00000069 VOL: 0
;PCODE: $0000006A VOL: 0
;PCODE: $0000006B VOL: 0
;PCODE: $0000006C VOL: 0
;PCODE: $0000006D VOL: 0
;PCODE: $0000006E VOL: 0
; 0000 0095    {
; 0000 0096    tx_buffer[tx_wr_index++]=c;
;PCODE: $0000006F VOL: 0
;PCODE: $00000070 VOL: 0
;PCODE: $00000071 VOL: 0
;PCODE: $00000072 VOL: 0
;PCODE: $00000073 VOL: 0
;PCODE: $00000074 VOL: 0
; 0000 0097 #if TX_BUFFER_SIZE != 256
; 0000 0098    if (tx_wr_index == TX_BUFFER_SIZE) tx_wr_index=0;
;PCODE: $00000075 VOL: 0
;PCODE: $00000076 VOL: 0
;PCODE: $00000077 VOL: 0
;PCODE: $00000078 VOL: 0
; 0000 0099 #endif
; 0000 009A    ++tx_counter;
;PCODE: $00000079 VOL: 0
;PCODE: $0000007A VOL: 0
; 0000 009B    }
; 0000 009C else
;PCODE: $0000007B VOL: 0
;PCODE: $0000007C VOL: 0
; 0000 009D    UDR=c;
;PCODE: $0000007D VOL: 0
;PCODE: $0000007E VOL: 0
; 0000 009E #asm("sei")
;PCODE: $0000007F VOL: 0
;PCODE: $00000080 VOL: 0
	sei
;PCODE: $00000081 VOL: 0
; 0000 009F }
;PCODE: $00000082 VOL: 0
;PCODE: $00000083 VOL: 0
;PCODE: $00000084 VOL: 0
;#pragma used-
;#endif
;
;// Standard Input/Output functions
;#include <stdio.h>
;  void init(void)
; 0000 00A6   {
;PCODE: $00000085 VOL: 0
;PCODE: $00000086 VOL: 0
; 0000 00A7     PORTB = PORTB | 0x18;
;PCODE: $00000087 VOL: 0
;PCODE: $00000088 VOL: 0
;PCODE: $00000089 VOL: 0
; 0000 00A8     PORTD = PORTD | 0x0C;
;PCODE: $0000008A VOL: 0
;PCODE: $0000008B VOL: 0
;PCODE: $0000008C VOL: 0
; 0000 00A9   }
;PCODE: $0000008D VOL: 0
;PCODE: $0000008E VOL: 0
; char getKeyPressed(void)
; 0000 00AB  {
;PCODE: $0000008F VOL: 0
;PCODE: $00000090 VOL: 0
; 0000 00AC     init();
;PCODE: $00000091 VOL: 0
; 0000 00AD 
; 0000 00AE     PORTB =  PORTB & 0xF7; //11110111 -> Записуємо в порт Б на 4те місце 0 (= PBD3 = KBRD0)
;PCODE: $00000092 VOL: 0
;PCODE: $00000093 VOL: 0
; 0000 00AF 
; 0000 00B0     if (0 == (0x80 & PIND)) { // checking KBDR7 - 1000000 AND PORT1, 0 - pressed
;PCODE: $00000094 VOL: 0
;PCODE: $00000095 VOL: 0
;PCODE: $00000096 VOL: 0
; 0000 00B1       return 0x81; //10000001
;PCODE: $00000097 VOL: 0
;PCODE: $00000098 VOL: 0
; 0000 00B2     }
; 0000 00B3     if (0 == (0x40 & PIND)) {
;PCODE: $00000099 VOL: 0
;PCODE: $0000009A VOL: 0
;PCODE: $0000009B VOL: 0
;PCODE: $0000009C VOL: 0
; 0000 00B4       return 0x82; //10000010
;PCODE: $0000009D VOL: 0
;PCODE: $0000009E VOL: 0
; 0000 00B5     }
; 0000 00B6     if (0 == (0x20 & PIND)) {
;PCODE: $0000009F VOL: 0
;PCODE: $000000A0 VOL: 0
;PCODE: $000000A1 VOL: 0
;PCODE: $000000A2 VOL: 0
; 0000 00B7       return 0x84; //10000100
;PCODE: $000000A3 VOL: 0
;PCODE: $000000A4 VOL: 0
; 0000 00B8     }
; 0000 00B9     if (0 == (0x10 & PIND)) {
;PCODE: $000000A5 VOL: 0
;PCODE: $000000A6 VOL: 0
;PCODE: $000000A7 VOL: 0
;PCODE: $000000A8 VOL: 0
; 0000 00BA       return 0x88; //10001000
;PCODE: $000000A9 VOL: 0
;PCODE: $000000AA VOL: 0
; 0000 00BB     }
; 0000 00BC     //K1BRD0 is checked - non of the keys is pressed
; 0000 00BD 
; 0000 00BE     init();
;PCODE: $000000AB VOL: 0
;PCODE: $000000AC VOL: 0
; 0000 00BF     PORTB = PORTB & 0xEF; //11101111 -> PB4 - KBRD1
;PCODE: $000000AD VOL: 0
;PCODE: $000000AE VOL: 0
; 0000 00C0     if (0 == (0x80 & PIND)) { // checking KBDR7 - 1000000 AND PORT1, 0 - pressed
;PCODE: $000000AF VOL: 0
;PCODE: $000000B0 VOL: 0
;PCODE: $000000B1 VOL: 0
; 0000 00C1       return 0x41; //01000001
;PCODE: $000000B2 VOL: 0
;PCODE: $000000B3 VOL: 0
; 0000 00C2     }
; 0000 00C3     if (0 == (0x40 & PIND)) {
;PCODE: $000000B4 VOL: 0
;PCODE: $000000B5 VOL: 0
;PCODE: $000000B6 VOL: 0
;PCODE: $000000B7 VOL: 0
; 0000 00C4       return 0x42; //01000010
;PCODE: $000000B8 VOL: 0
;PCODE: $000000B9 VOL: 0
; 0000 00C5     }
; 0000 00C6     if (0 == (0x20 & PIND)) {
;PCODE: $000000BA VOL: 0
;PCODE: $000000BB VOL: 0
;PCODE: $000000BC VOL: 0
;PCODE: $000000BD VOL: 0
; 0000 00C7       return 0x44; //01000100
;PCODE: $000000BE VOL: 0
;PCODE: $000000BF VOL: 0
; 0000 00C8     }
; 0000 00C9     if (0 == (0x10 & PIND)) {
;PCODE: $000000C0 VOL: 0
;PCODE: $000000C1 VOL: 0
;PCODE: $000000C2 VOL: 0
;PCODE: $000000C3 VOL: 0
; 0000 00CA       return 0x48; //01001000
;PCODE: $000000C4 VOL: 0
;PCODE: $000000C5 VOL: 0
; 0000 00CB     }
; 0000 00CC     //KBRD1 is checked - non of the keys is pressed
; 0000 00CD 
; 0000 00CE     init();
;PCODE: $000000C6 VOL: 0
;PCODE: $000000C7 VOL: 0
; 0000 00CF     PORTD = PORTD & 0xFB; //11111011 -> PD2 - KBRD2
;PCODE: $000000C8 VOL: 0
;PCODE: $000000C9 VOL: 0
; 0000 00D0     if (0 == (0x80 & PIND)) { // checking KBDR7 - 1000000 AND PORT1, 0 - pressed
;PCODE: $000000CA VOL: 0
;PCODE: $000000CB VOL: 0
;PCODE: $000000CC VOL: 0
; 0000 00D1       return 0x21; //00100001
;PCODE: $000000CD VOL: 0
;PCODE: $000000CE VOL: 0
; 0000 00D2     }
; 0000 00D3     if (0 == (0x40 & PIND)) {
;PCODE: $000000CF VOL: 0
;PCODE: $000000D0 VOL: 0
;PCODE: $000000D1 VOL: 0
;PCODE: $000000D2 VOL: 0
; 0000 00D4       return 0x22; //00100010
;PCODE: $000000D3 VOL: 0
;PCODE: $000000D4 VOL: 0
; 0000 00D5     }
; 0000 00D6     if (0 == (0x20 & PIND)) {
;PCODE: $000000D5 VOL: 0
;PCODE: $000000D6 VOL: 0
;PCODE: $000000D7 VOL: 0
;PCODE: $000000D8 VOL: 0
; 0000 00D7       return 0x24; //00100100
;PCODE: $000000D9 VOL: 0
;PCODE: $000000DA VOL: 0
; 0000 00D8     }
; 0000 00D9     if (0 == (0x10 & PIND)) {
;PCODE: $000000DB VOL: 0
;PCODE: $000000DC VOL: 0
;PCODE: $000000DD VOL: 0
;PCODE: $000000DE VOL: 0
; 0000 00DA       return 0x28; //00101000
;PCODE: $000000DF VOL: 0
;PCODE: $000000E0 VOL: 0
; 0000 00DB     }
; 0000 00DC     //KBRD2 is checked - non of the keys is pressed
; 0000 00DD 
; 0000 00DE     init();
;PCODE: $000000E1 VOL: 0
;PCODE: $000000E2 VOL: 0
; 0000 00DF     PORTD = PORTD & 0xF7; //11110111 -> PD3 - KBRD3
;PCODE: $000000E3 VOL: 0
;PCODE: $000000E4 VOL: 0
; 0000 00E0     if (0 == (0x80 & PIND)) { // checking KBDR7 - 1000000 AND PORT1, 0 - pressed
;PCODE: $000000E5 VOL: 0
;PCODE: $000000E6 VOL: 0
;PCODE: $000000E7 VOL: 0
; 0000 00E1       return 0x11; //00010001
;PCODE: $000000E8 VOL: 0
;PCODE: $000000E9 VOL: 0
; 0000 00E2     }
; 0000 00E3     if (0 == (0x40 & PIND)) {
;PCODE: $000000EA VOL: 0
;PCODE: $000000EB VOL: 0
;PCODE: $000000EC VOL: 0
;PCODE: $000000ED VOL: 0
; 0000 00E4       return 0x12; //00010010
;PCODE: $000000EE VOL: 0
;PCODE: $000000EF VOL: 0
; 0000 00E5     }
; 0000 00E6     if (0 == (0x20 & PIND)) {
;PCODE: $000000F0 VOL: 0
;PCODE: $000000F1 VOL: 0
;PCODE: $000000F2 VOL: 0
;PCODE: $000000F3 VOL: 0
; 0000 00E7       return 0x14; //00010100
;PCODE: $000000F4 VOL: 0
;PCODE: $000000F5 VOL: 0
; 0000 00E8     }
; 0000 00E9     if (0 == (0x10 & PIND)) {
;PCODE: $000000F6 VOL: 0
;PCODE: $000000F7 VOL: 0
;PCODE: $000000F8 VOL: 0
;PCODE: $000000F9 VOL: 0
; 0000 00EA       return 0x18; //00011000
;PCODE: $000000FA VOL: 0
;PCODE: $000000FB VOL: 0
; 0000 00EB     }
; 0000 00EC     //KBRD0 is checked - non of the keys is pressed
; 0000 00ED     init();
;PCODE: $000000FC VOL: 0
;PCODE: $000000FD VOL: 0
; 0000 00EE 
; 0000 00EF     return 0; //none of the keys pressed
;PCODE: $000000FE VOL: 0
;PCODE: $000000FF VOL: 0
; 0000 00F0  }
;PCODE: $00000100 VOL: 0
;
;// Timer 0 overflow interrupt service routine
;interrupt [TIM0_OVF] void timer0_ovf_isr(void)
; 0000 00F4 {
;PCODE: $00000101 VOL: 0
;PCODE: $00000102 VOL: 0
; 0000 00F5 static char oldValue=0, newValue=0;
; 0000 00F6 // Reinitialize Timer 0 value
; 0000 00F7 TCNT0=0x64;
;PCODE: $00000103 VOL: 0
;PCODE: $00000104 VOL: 0
; 0000 00F8 // Place your code here
; 0000 00F9 
; 0000 00FA  newValue =  getKeyPressed();
;PCODE: $00000105 VOL: 0
;PCODE: $00000106 VOL: 0
; 0000 00FB  if (newValue != oldValue) {
;PCODE: $00000107 VOL: 0
;PCODE: $00000108 VOL: 0
;PCODE: $00000109 VOL: 0
;PCODE: $0000010A VOL: 0
; 0000 00FC    PORTC = newValue;
;PCODE: $0000010B VOL: 0
;PCODE: $0000010C VOL: 0
; 0000 00FD    oldValue = newValue;
;PCODE: $0000010D VOL: 0
;PCODE: $0000010E VOL: 0
; 0000 00FE    putchar(newValue);
;PCODE: $0000010F VOL: 0
;PCODE: $00000110 VOL: 0
;PCODE: $00000111 VOL: 0
; 0000 00FF    if(newValue ==0) {
;PCODE: $00000112 VOL: 0
;PCODE: $00000113 VOL: 0
;PCODE: $00000114 VOL: 0
; 0000 0100      puts("Key released\n\r");
;PCODE: $00000115 VOL: 0
;PCODE: $00000116 VOL: 0
;PCODE: $00000117 VOL: 0
;PCODE: $00000118 VOL: 0
; 0000 0101    } else {
;PCODE: $00000119 VOL: 0
;PCODE: $0000011A VOL: 0
; 0000 0102      puts("Key pressed\n\r");
;PCODE: $0000011B VOL: 0
;PCODE: $0000011C VOL: 0
;PCODE: $0000011D VOL: 0
;PCODE: $0000011E VOL: 0
; 0000 0103    }
;PCODE: $0000011F VOL: 0
; 0000 0104    //puts((newValue == 0) ? " Key released\n\r" : " Key pressed\n\r");
; 0000 0105  }
; 0000 0106 }
;PCODE: $00000120 VOL: 0
;PCODE: $00000121 VOL: 0
;PCODE: $00000122 VOL: 0
;PCODE: $00000123 VOL: 0

	.DSEG
_0x26:
	.BYTE 0x1D
;
;// Declare your global variables here
;
;void main(void)
; 0000 010B {

	.CSEG
;PCODE: $00000124 VOL: 0
; 0000 010C // Declare your local variables here
; 0000 010D 
; 0000 010E // Input/Output Ports initialization
; 0000 010F // Port A initialization
; 0000 0110 // Func7=In Func6=In Func5=In Func4=In Func3=In Func2=In Func1=In Func0=In
; 0000 0111 // State7=T State6=T State5=T State4=T State3=T State2=T State1=T State0=T
; 0000 0112 PORTA=0x00;
;PCODE: $00000125 VOL: 0
;PCODE: $00000126 VOL: 0
; 0000 0113 DDRA=0x00;
;PCODE: $00000127 VOL: 0
;PCODE: $00000128 VOL: 0
; 0000 0114 
; 0000 0115 // Port B initialization
; 0000 0116 // Func7=In Func6=In Func5=In Func4=Out Func3=Out Func2=In Func1=In Func0=In
; 0000 0117 // State7=T State6=T State5=T State4=0 State3=0 State2=T State1=T State0=T
; 0000 0118 PORTB=0x00;
;PCODE: $00000129 VOL: 0
;PCODE: $0000012A VOL: 0
; 0000 0119 DDRB=0x18;
;PCODE: $0000012B VOL: 0
;PCODE: $0000012C VOL: 0
; 0000 011A 
; 0000 011B // Port C initialization
; 0000 011C // Func7=Out Func6=Out Func5=Out Func4=Out Func3=Out Func2=Out Func1=Out Func0=Out
; 0000 011D // State7=0 State6=0 State5=0 State4=0 State3=0 State2=0 State1=0 State0=0
; 0000 011E PORTC=0x00;
;PCODE: $0000012D VOL: 0
;PCODE: $0000012E VOL: 0
; 0000 011F DDRC=0xFF;
;PCODE: $0000012F VOL: 0
;PCODE: $00000130 VOL: 0
; 0000 0120 
; 0000 0121 // Port D initialization
; 0000 0122 // Func7=In Func6=In Func5=In Func4=In Func3=Out Func2=Out Func1=In Func0=In
; 0000 0123 // State7=P State6=P State5=P State4=P State3=0 State2=0 State1=T State0=T
; 0000 0124 PORTD=0xF0;
;PCODE: $00000131 VOL: 0
;PCODE: $00000132 VOL: 0
; 0000 0125 DDRD=0x0C;
;PCODE: $00000133 VOL: 0
;PCODE: $00000134 VOL: 0
; 0000 0126 
; 0000 0127 // Timer/Counter 0 initialization
; 0000 0128 // Clock source: System Clock
; 0000 0129 // Clock value: 15,625 kHz
; 0000 012A // Mode: Normal top=0xFF
; 0000 012B // OC0 output: Disconnected
; 0000 012C TCCR0=0x05;
;PCODE: $00000135 VOL: 0
;PCODE: $00000136 VOL: 0
; 0000 012D TCNT0=0x64;
;PCODE: $00000137 VOL: 0
;PCODE: $00000138 VOL: 0
; 0000 012E OCR0=0x00;
;PCODE: $00000139 VOL: 0
;PCODE: $0000013A VOL: 0
; 0000 012F 
; 0000 0130 // Timer/Counter 1 initialization
; 0000 0131 // Clock source: System Clock
; 0000 0132 // Clock value: Timer1 Stopped
; 0000 0133 // Mode: Normal top=0xFFFF
; 0000 0134 // OC1A output: Discon.
; 0000 0135 // OC1B output: Discon.
; 0000 0136 // Noise Canceler: Off
; 0000 0137 // Input Capture on Falling Edge
; 0000 0138 // Timer1 Overflow Interrupt: Off
; 0000 0139 // Input Capture Interrupt: Off
; 0000 013A // Compare A Match Interrupt: Off
; 0000 013B // Compare B Match Interrupt: Off
; 0000 013C TCCR1A=0x00;
;PCODE: $0000013B VOL: 0
;PCODE: $0000013C VOL: 0
; 0000 013D TCCR1B=0x00;
;PCODE: $0000013D VOL: 0
;PCODE: $0000013E VOL: 0
; 0000 013E TCNT1H=0x00;
;PCODE: $0000013F VOL: 0
;PCODE: $00000140 VOL: 0
; 0000 013F TCNT1L=0x00;
;PCODE: $00000141 VOL: 0
;PCODE: $00000142 VOL: 0
; 0000 0140 ICR1H=0x00;
;PCODE: $00000143 VOL: 0
;PCODE: $00000144 VOL: 0
; 0000 0141 ICR1L=0x00;
;PCODE: $00000145 VOL: 0
;PCODE: $00000146 VOL: 0
; 0000 0142 OCR1AH=0x00;
;PCODE: $00000147 VOL: 0
;PCODE: $00000148 VOL: 0
; 0000 0143 OCR1AL=0x00;
;PCODE: $00000149 VOL: 0
;PCODE: $0000014A VOL: 0
; 0000 0144 OCR1BH=0x00;
;PCODE: $0000014B VOL: 0
;PCODE: $0000014C VOL: 0
; 0000 0145 OCR1BL=0x00;
;PCODE: $0000014D VOL: 0
;PCODE: $0000014E VOL: 0
; 0000 0146 
; 0000 0147 // Timer/Counter 2 initialization
; 0000 0148 // Clock source: System Clock
; 0000 0149 // Clock value: Timer2 Stopped
; 0000 014A // Mode: Normal top=0xFF
; 0000 014B // OC2 output: Disconnected
; 0000 014C ASSR=0x00;
;PCODE: $0000014F VOL: 0
;PCODE: $00000150 VOL: 0
; 0000 014D TCCR2=0x00;
;PCODE: $00000151 VOL: 0
;PCODE: $00000152 VOL: 0
; 0000 014E TCNT2=0x00;
;PCODE: $00000153 VOL: 0
;PCODE: $00000154 VOL: 0
; 0000 014F OCR2=0x00;
;PCODE: $00000155 VOL: 0
;PCODE: $00000156 VOL: 0
; 0000 0150 
; 0000 0151 // External Interrupt(s) initialization
; 0000 0152 // INT0: Off
; 0000 0153 // INT1: Off
; 0000 0154 // INT2: Off
; 0000 0155 MCUCR=0x00;
;PCODE: $00000157 VOL: 0
;PCODE: $00000158 VOL: 0
; 0000 0156 MCUCSR=0x00;
;PCODE: $00000159 VOL: 0
;PCODE: $0000015A VOL: 0
; 0000 0157 
; 0000 0158 // Timer(s)/Counter(s) Interrupt(s) initialization
; 0000 0159 TIMSK=0x01;
;PCODE: $0000015B VOL: 0
;PCODE: $0000015C VOL: 0
; 0000 015A 
; 0000 015B // USART initialization
; 0000 015C // Communication Parameters: 8 Data, 1 Stop, No Parity
; 0000 015D // USART Receiver: On
; 0000 015E // USART Transmitter: On
; 0000 015F // USART Mode: Asynchronous
; 0000 0160 // USART Baud Rate: 19200
; 0000 0161 UCSRA=0x00;
;PCODE: $0000015D VOL: 0
;PCODE: $0000015E VOL: 0
; 0000 0162 UCSRB=0xD8;
;PCODE: $0000015F VOL: 0
;PCODE: $00000160 VOL: 0
; 0000 0163 UCSRC=0x86;
;PCODE: $00000161 VOL: 0
;PCODE: $00000162 VOL: 0
; 0000 0164 UBRRH=0x00;
;PCODE: $00000163 VOL: 0
;PCODE: $00000164 VOL: 0
; 0000 0165 UBRRL=0x33;
;PCODE: $00000165 VOL: 0
;PCODE: $00000166 VOL: 0
; 0000 0166 
; 0000 0167 // Analog Comparator initialization
; 0000 0168 // Analog Comparator: Off
; 0000 0169 // Analog Comparator Input Capture by Timer/Counter 1: Off
; 0000 016A ACSR=0x80;
;PCODE: $00000167 VOL: 0
;PCODE: $00000168 VOL: 0
; 0000 016B SFIOR=0x00;
;PCODE: $00000169 VOL: 0
;PCODE: $0000016A VOL: 0
; 0000 016C 
; 0000 016D // ADC initialization
; 0000 016E // ADC disabled
; 0000 016F ADCSRA=0x00;
;PCODE: $0000016B VOL: 0
;PCODE: $0000016C VOL: 0
; 0000 0170 
; 0000 0171 // SPI initialization
; 0000 0172 // SPI disabled
; 0000 0173 SPCR=0x00;
;PCODE: $0000016D VOL: 0
;PCODE: $0000016E VOL: 0
; 0000 0174 
; 0000 0175 // TWI initialization
; 0000 0176 // TWI disabled
; 0000 0177 TWCR=0x00;
;PCODE: $0000016F VOL: 0
;PCODE: $00000170 VOL: 0
; 0000 0178 
; 0000 0179 // Global enable interrupts
; 0000 017A #asm("sei")
;PCODE: $00000171 VOL: 0
	sei
;PCODE: $00000172 VOL: 0
; 0000 017B //puts("hello");
; 0000 017C 
; 0000 017D while (1)
;PCODE: $00000173 VOL: 0
; 0000 017E       {
; 0000 017F       // Place your code here
; 0000 0180 
; 0000 0181       }
;PCODE: $00000174 VOL: 0
;PCODE: $00000175 VOL: 0
; 0000 0182 }
;PCODE: $00000176 VOL: 0
;PCODE: $00000177 VOL: 0
;PCODE: $00000178 VOL: 0
