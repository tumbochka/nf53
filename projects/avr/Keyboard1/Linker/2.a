;/*****************************************************
;This program was produced by the
;CodeWizardAVR V2.05.0 Professional
;Automatic Program Generator
;© Copyright 1998-2010 Pavel Haiduc, HP InfoTech s.r.l.
;http://www.hpinfotech.com
;
;Project :
;Version :
;Date    : 15.09.2023
;Author  :
;Company :
;Comments:
;
;
;Chip type               : ATmega8535
;Program type            : Application
;AVR Core Clock frequency: 16,000000 MHz
;Memory model            : Small
;External RAM size       : 0
;Data Stack size         : 128
;*****************************************************/
;
;#include <mega8535.h>
;PCODE: $00000000 VOL: 0
	#ifndef __SLEEP_DEFINED__
;PCODE: $00000001 VOL: 0
	#define __SLEEP_DEFINED__
;PCODE: $00000002 VOL: 0
	.EQU __se_bit=0x40
;PCODE: $00000003 VOL: 0
	.EQU __sm_mask=0xB0
;PCODE: $00000004 VOL: 0
	.EQU __sm_powerdown=0x20
;PCODE: $00000005 VOL: 0
	.EQU __sm_powersave=0x30
;PCODE: $00000006 VOL: 0
	.EQU __sm_standby=0xA0
;PCODE: $00000007 VOL: 0
	.EQU __sm_ext_standby=0xB0
;PCODE: $00000008 VOL: 0
	.EQU __sm_adc_noise_red=0x10
;PCODE: $00000009 VOL: 0
	.SET power_ctrl_reg=mcucr
;PCODE: $0000000A VOL: 0
	#endif
;PCODE: $0000000B VOL: 0
;PCODE: $0000000C VOL: 0
;  void init(void)
; 0000 001A   {

	.CSEG
;PCODE: $0000000D VOL: 0
;PCODE: $0000000E VOL: 0
; 0000 001B      PORTB = PORTB | 0x18;
;PCODE: $0000000F VOL: 0
;PCODE: $00000010 VOL: 0
;PCODE: $00000011 VOL: 0
; 0000 001C     PORTD = PORTD | 0x0C;
;PCODE: $00000012 VOL: 0
;PCODE: $00000013 VOL: 0
;PCODE: $00000014 VOL: 0
; 0000 001D   }
;PCODE: $00000015 VOL: 0
;PCODE: $00000016 VOL: 0
; char getKeyPressed(void)
; 0000 001F  {
;PCODE: $00000017 VOL: 0
;PCODE: $00000018 VOL: 0
; 0000 0020 
; 0000 0021     char pattern = 0xF0; // 11110000
; 0000 0022     char sample;
; 0000 0023     // state: kbrd0-kbrd4 - 1
; 0000 0024     init();
;PCODE: $00000019 VOL: 0
;	pattern -> R17
;	sample -> R16
;PCODE: $0000001A VOL: 0
;PCODE: $0000001B VOL: 0
;PCODE: $0000001C VOL: 0
; 0000 0025     PORTB =  PORTB & 0xF7; //11110111 -> Записуємо в порт Б на 4те місце 0 (= PBD3 = KBRD0)
;PCODE: $0000001D VOL: 0
;PCODE: $0000001E VOL: 0
; 0000 0026     sample = PIND & pattern; //якщо жодна з клавиш не натиснута, то sampe === pattern
;PCODE: $0000001F VOL: 0
;PCODE: $00000020 VOL: 0
;PCODE: $00000021 VOL: 0
; 0000 0027     if (sample != pattern) { // key pressed
;PCODE: $00000022 VOL: 0
;PCODE: $00000023 VOL: 0
;PCODE: $00000024 VOL: 0
; 0000 0028        return 0x08 | (sample ^ pattern); //returns 1000 as we're checking KBRD0 and a bit that corresponds KBRD4-KBRD7
;PCODE: $00000025 VOL: 0
;PCODE: $00000026 VOL: 0
;PCODE: $00000027 VOL: 0
;PCODE: $00000028 VOL: 0
;PCODE: $00000029 VOL: 0
; 0000 0029     }
; 0000 002A     //KBRD0 is checked - non of the keys is pressed
; 0000 002B 
; 0000 002C     init();
;PCODE: $0000002A VOL: 0
;PCODE: $0000002B VOL: 0
; 0000 002D     PORTB = PORTB & 0xEF; //11101111 -> PB4 - KBRD1
;PCODE: $0000002C VOL: 0
;PCODE: $0000002D VOL: 0
; 0000 002E     sample = PIND & pattern;
;PCODE: $0000002E VOL: 0
;PCODE: $0000002F VOL: 0
;PCODE: $00000030 VOL: 0
; 0000 002F     if (sample != pattern) { // key pressed
;PCODE: $00000031 VOL: 0
;PCODE: $00000032 VOL: 0
;PCODE: $00000033 VOL: 0
; 0000 0030        return 0x04 | (sample ^ pattern); //returns 0100 as we're checking KBRD1 and a bit that corresponds KBRD4-KBRD7
;PCODE: $00000034 VOL: 0
;PCODE: $00000035 VOL: 0
;PCODE: $00000036 VOL: 0
;PCODE: $00000037 VOL: 0
;PCODE: $00000038 VOL: 0
; 0000 0031     }
; 0000 0032     //KBRD1 is checked - non of the keys is pressed
; 0000 0033 
; 0000 0034     init();
;PCODE: $00000039 VOL: 0
;PCODE: $0000003A VOL: 0
; 0000 0035     PORTD = PORTD & 0xFB; //11111011 -> PD2 - KBRD2
;PCODE: $0000003B VOL: 0
;PCODE: $0000003C VOL: 0
; 0000 0036     sample = PIND & pattern;
;PCODE: $0000003D VOL: 0
;PCODE: $0000003E VOL: 0
;PCODE: $0000003F VOL: 0
; 0000 0037     if (sample != pattern) { // key pressed
;PCODE: $00000040 VOL: 0
;PCODE: $00000041 VOL: 0
;PCODE: $00000042 VOL: 0
; 0000 0038        return 0x02 | (sample ^ pattern); //returns 0010 as we're checking KBRD2 and a bit that corresponds KBRD4-KBRD7
;PCODE: $00000043 VOL: 0
;PCODE: $00000044 VOL: 0
;PCODE: $00000045 VOL: 0
;PCODE: $00000046 VOL: 0
;PCODE: $00000047 VOL: 0
; 0000 0039     }
; 0000 003A     //KBRD2 is checked - non of the keys is pressed
; 0000 003B 
; 0000 003C     init();
;PCODE: $00000048 VOL: 0
;PCODE: $00000049 VOL: 0
; 0000 003D     PORTD = PORTD & 0xF7; //11110111 -> PD3 - KBRD3
;PCODE: $0000004A VOL: 0
;PCODE: $0000004B VOL: 0
; 0000 003E     sample = PIND & pattern;
;PCODE: $0000004C VOL: 0
;PCODE: $0000004D VOL: 0
;PCODE: $0000004E VOL: 0
; 0000 003F     if (sample != pattern) { // key pressed
;PCODE: $0000004F VOL: 0
;PCODE: $00000050 VOL: 0
;PCODE: $00000051 VOL: 0
; 0000 0040        return 0x01 | (sample ^ pattern); //returns 0001 as we're checking KBRD3 and a bit that corresponds KBRD4-KBRD7
;PCODE: $00000052 VOL: 0
;PCODE: $00000053 VOL: 0
;PCODE: $00000054 VOL: 0
;PCODE: $00000055 VOL: 0
;PCODE: $00000056 VOL: 0
; 0000 0041     }
; 0000 0042     //KBRD0 is checked - non of the keys is pressed
; 0000 0043 
; 0000 0044     return 0; //none of the keys pressed
;PCODE: $00000057 VOL: 0
;PCODE: $00000058 VOL: 0
;PCODE: $00000059 VOL: 0
;PCODE: $0000005A VOL: 0
; 0000 0045  }
;PCODE: $0000005B VOL: 0
;// Timer 0 overflow interrupt service routine
;interrupt [TIM0_OVF] void timer0_ovf_isr(void)
; 0000 0048 {
;PCODE: $0000005C VOL: 0
;PCODE: $0000005D VOL: 0
; 0000 0049 // Reinitialize Timer 0 value
; 0000 004A TCNT0=0x64;
;PCODE: $0000005E VOL: 0
;PCODE: $0000005F VOL: 0
; 0000 004B // Place your code here.
; 0000 004C  // outs
; 0000 004D  //  KBRD0 - PB3
; 0000 004E  //  KBRD1 - PB4  //00011000
; 0000 004F  //  KBRD2 - PD2
; 0000 0050  //  KBRD3 - PD3  //00001100
; 0000 0051  // ins
; 0000 0052  //  KBRD4 - PD4
; 0000 0053  //  KBRD5 - PD5
; 0000 0054  //  KBRD6 - PD6
; 0000 0055  //  KBRD7 - PD7
; 0000 0056 
; 0000 0057  PORTC = getKeyPressed();
;PCODE: $00000060 VOL: 0
;PCODE: $00000061 VOL: 0
; 0000 0058 }
;PCODE: $00000062 VOL: 0
;PCODE: $00000063 VOL: 0
;PCODE: $00000064 VOL: 0
;
;// Declare your global variables here
;
;void main(void)
; 0000 005D {
;PCODE: $00000065 VOL: 0
; 0000 005E // Declare your local variables here
; 0000 005F 
; 0000 0060 // Input/Output Ports initialization
; 0000 0061 // Port A initialization
; 0000 0062 // Func7=In Func6=In Func5=In Func4=In Func3=In Func2=In Func1=In Func0=In
; 0000 0063 // State7=T State6=T State5=T State4=T State3=T State2=T State1=T State0=T
; 0000 0064 PORTA=0x00;
;PCODE: $00000066 VOL: 0
;PCODE: $00000067 VOL: 0
; 0000 0065 DDRA=0x00;
;PCODE: $00000068 VOL: 0
;PCODE: $00000069 VOL: 0
; 0000 0066 
; 0000 0067 // Port B initialization
; 0000 0068 // Func7=In Func6=In Func5=In Func4=Out Func3=Out Func2=In Func1=In Func0=In
; 0000 0069 // State7=T State6=T State5=T State4=0 State3=0 State2=T State1=T State0=T
; 0000 006A PORTB=0x00;
;PCODE: $0000006A VOL: 0
;PCODE: $0000006B VOL: 0
; 0000 006B DDRB=0x18;
;PCODE: $0000006C VOL: 0
;PCODE: $0000006D VOL: 0
; 0000 006C 
; 0000 006D // Port C initialization
; 0000 006E // Func7=Out Func6=Out Func5=Out Func4=Out Func3=Out Func2=Out Func1=Out Func0=Out
; 0000 006F // State7=0 State6=0 State5=0 State4=0 State3=0 State2=0 State1=0 State0=0
; 0000 0070 PORTC=0x00;
;PCODE: $0000006E VOL: 0
;PCODE: $0000006F VOL: 0
; 0000 0071 DDRC=0xFF;
;PCODE: $00000070 VOL: 0
;PCODE: $00000071 VOL: 0
; 0000 0072 
; 0000 0073 // Port D initialization
; 0000 0074 // Func7=In Func6=In Func5=In Func4=In Func3=Out Func2=Out Func1=In Func0=In
; 0000 0075 // State7=P State6=P State5=P State4=P State3=0 State2=0 State1=T State0=T
; 0000 0076 PORTD=0xF0;
;PCODE: $00000072 VOL: 0
;PCODE: $00000073 VOL: 0
; 0000 0077 DDRD=0x0C;
;PCODE: $00000074 VOL: 0
;PCODE: $00000075 VOL: 0
; 0000 0078 
; 0000 0079 // Timer/Counter 0 initialization
; 0000 007A // Clock source: System Clock
; 0000 007B // Clock value: 15,625 kHz
; 0000 007C // Mode: Normal top=0xFF
; 0000 007D // OC0 output: Disconnected
; 0000 007E TCCR0=0x05;
;PCODE: $00000076 VOL: 0
;PCODE: $00000077 VOL: 0
; 0000 007F TCNT0=0x64;
;PCODE: $00000078 VOL: 0
;PCODE: $00000079 VOL: 0
; 0000 0080 OCR0=0x00;
;PCODE: $0000007A VOL: 0
;PCODE: $0000007B VOL: 0
; 0000 0081 
; 0000 0082 // Timer/Counter 1 initialization
; 0000 0083 // Clock source: System Clock
; 0000 0084 // Clock value: 62,500 kHz
; 0000 0085 // Mode: CTC top=OCR1A
; 0000 0086 // OC1A output: Discon.
; 0000 0087 // OC1B output: Discon.
; 0000 0088 // Noise Canceler: Off
; 0000 0089 // Input Capture on Falling Edge
; 0000 008A // Timer1 Overflow Interrupt: Off
; 0000 008B // Input Capture Interrupt: Off
; 0000 008C // Compare A Match Interrupt: Off
; 0000 008D // Compare B Match Interrupt: Off
; 0000 008E TCCR1A=0x00;
;PCODE: $0000007C VOL: 0
;PCODE: $0000007D VOL: 0
; 0000 008F TCCR1B=0x0C;
;PCODE: $0000007E VOL: 0
;PCODE: $0000007F VOL: 0
; 0000 0090 TCNT1H=0x00;
;PCODE: $00000080 VOL: 0
;PCODE: $00000081 VOL: 0
; 0000 0091 TCNT1L=0x00;
;PCODE: $00000082 VOL: 0
;PCODE: $00000083 VOL: 0
; 0000 0092 ICR1H=0x00;
;PCODE: $00000084 VOL: 0
;PCODE: $00000085 VOL: 0
; 0000 0093 ICR1L=0x00;
;PCODE: $00000086 VOL: 0
;PCODE: $00000087 VOL: 0
; 0000 0094 OCR1AH=0x00;
;PCODE: $00000088 VOL: 0
;PCODE: $00000089 VOL: 0
; 0000 0095 OCR1AL=0x00;
;PCODE: $0000008A VOL: 0
;PCODE: $0000008B VOL: 0
; 0000 0096 OCR1BH=0x00;
;PCODE: $0000008C VOL: 0
;PCODE: $0000008D VOL: 0
; 0000 0097 OCR1BL=0x00;
;PCODE: $0000008E VOL: 0
;PCODE: $0000008F VOL: 0
; 0000 0098 
; 0000 0099 // Timer/Counter 2 initialization
; 0000 009A // Clock source: System Clock
; 0000 009B // Clock value: Timer2 Stopped
; 0000 009C // Mode: Normal top=0xFF
; 0000 009D // OC2 output: Disconnected
; 0000 009E ASSR=0x00;
;PCODE: $00000090 VOL: 0
;PCODE: $00000091 VOL: 0
; 0000 009F TCCR2=0x00;
;PCODE: $00000092 VOL: 0
;PCODE: $00000093 VOL: 0
; 0000 00A0 TCNT2=0x00;
;PCODE: $00000094 VOL: 0
;PCODE: $00000095 VOL: 0
; 0000 00A1 OCR2=0x00;
;PCODE: $00000096 VOL: 0
;PCODE: $00000097 VOL: 0
; 0000 00A2 
; 0000 00A3 // External Interrupt(s) initialization
; 0000 00A4 // INT0: Off
; 0000 00A5 // INT1: Off
; 0000 00A6 // INT2: Off
; 0000 00A7 MCUCR=0x00;
;PCODE: $00000098 VOL: 0
;PCODE: $00000099 VOL: 0
; 0000 00A8 MCUCSR=0x00;
;PCODE: $0000009A VOL: 0
;PCODE: $0000009B VOL: 0
; 0000 00A9 
; 0000 00AA // Timer(s)/Counter(s) Interrupt(s) initialization
; 0000 00AB TIMSK=0x01;
;PCODE: $0000009C VOL: 0
;PCODE: $0000009D VOL: 0
; 0000 00AC 
; 0000 00AD // USART initialization
; 0000 00AE // USART disabled
; 0000 00AF UCSRB=0x00;
;PCODE: $0000009E VOL: 0
;PCODE: $0000009F VOL: 0
; 0000 00B0 
; 0000 00B1 // Analog Comparator initialization
; 0000 00B2 // Analog Comparator: Off
; 0000 00B3 // Analog Comparator Input Capture by Timer/Counter 1: Off
; 0000 00B4 ACSR=0x80;
;PCODE: $000000A0 VOL: 0
;PCODE: $000000A1 VOL: 0
; 0000 00B5 SFIOR=0x00;
;PCODE: $000000A2 VOL: 0
;PCODE: $000000A3 VOL: 0
; 0000 00B6 
; 0000 00B7 // ADC initialization
; 0000 00B8 // ADC disabled
; 0000 00B9 ADCSRA=0x00;
;PCODE: $000000A4 VOL: 0
;PCODE: $000000A5 VOL: 0
; 0000 00BA 
; 0000 00BB // SPI initialization
; 0000 00BC // SPI disabled
; 0000 00BD SPCR=0x00;
;PCODE: $000000A6 VOL: 0
;PCODE: $000000A7 VOL: 0
; 0000 00BE 
; 0000 00BF // TWI initialization
; 0000 00C0 // TWI disabled
; 0000 00C1 TWCR=0x00;
;PCODE: $000000A8 VOL: 0
;PCODE: $000000A9 VOL: 0
; 0000 00C2 
; 0000 00C3 // Global enable interrupts
; 0000 00C4 #asm("sei")
;PCODE: $000000AA VOL: 0
	sei
;PCODE: $000000AB VOL: 0
; 0000 00C5 
; 0000 00C6 while (1)
;PCODE: $000000AC VOL: 0
; 0000 00C7       {
; 0000 00C8       // Place your code here
; 0000 00C9 
; 0000 00CA       }
;PCODE: $000000AD VOL: 0
;PCODE: $000000AE VOL: 0
; 0000 00CB }
;PCODE: $000000AF VOL: 0
;PCODE: $000000B0 VOL: 0
;PCODE: $000000B1 VOL: 0
